@page "/listofpokemons"

@using PokeAPI
@using PokeAPIWebApp.Data

@if (pokemons() == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="form-group">
        <input class="form-control" type="text" placeholder="Filter by name, e. g. Pikachu" @bind="Filter" @bind:event="oninput">
    </div>
    <table class="table table-striped">
        <thead class="thead-light">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Generation</th>
                <th>Color</th>
                <th>More details</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var element in pokemons())
            {
                if (!IsVisible(element))
                    continue;

                <tr>
                    <td>@element.ID</td>
                    <td>@element.Name</td>
                    <td>@element.Generation.Name</td>
                    <td>@element.Colours.Name</td>
                    <td><button @onclick="@(() => Download(element.ID))">Download</button></td>
                </tr>
            }

        </tbody>
    </table>
}


@code 
{

    public List<PokemonSpecies> allpokemons = new List<PokemonSpecies>();

    public string Filter { get; set; }

    public bool IsVisible(PokemonSpecies pokemon)
    {
        if (string.IsNullOrEmpty(Filter))
            return true;
        if (pokemon.Name.Contains(Filter, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            for (int i = 1; i <= 50; i++)
            {
                var p = await DataFetcher.GetApiObject<PokemonSpecies>(i);
                allpokemons.Add(p);
            }
        }
        catch(HttpRequestException e)
        {
            Console.WriteLine("{0}. Actualmente los servidores de pokeapi están fuera de servicio", e);
        }
    }

    public List<PokemonSpecies> pokemons()
    {
        return allpokemons;
    }

    [Inject]
    private IFileSaver oIFileSave { get; set; }
    private string FileName { get; set; } = "pokemon.text";
    public List<string> Data = new List<string>();



    private async Task Download(int id)
    {
        string varieties = "";
        string pokedexNumbers = "";

        if (Data.Count() != 0)
            Data.RemoveAt(0);

        foreach (var element in pokemons())
        {
            if (id == element.ID)
            {
                foreach (var index in element.Varieties)
                {
                    varieties += ((index.Pokemon.Name).ToString());
                    varieties += ", ";

                }

                foreach (var index in element.PokedexNumbers)
                {
                    pokedexNumbers += ((index.Pokedex.Name).ToString());
                    pokedexNumbers += ", ";
                }

                Data.Add("ID: " + ((element.ID).ToString()) + "\n" + "Name: " + element.Name + "\n" + "Shape: "
                + element.Shape.Name + "\n" + "Color: " + element.Colours.Name + "\n" + "Habitat: " + element.Habitat.Name
                + "\n" + "Varieties: " + varieties + "\n" + "Pokedex numbers: " + pokedexNumbers + "\n" +
                "Generation: " + element.Generation.Name + "\n" + "Evolution chain: " + element.EvolutionChain.Url + "\n");


            }

        }

        await oIFileSave.SaveAs(FileName, Data);
    }


}
